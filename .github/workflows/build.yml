name: Build and deploy Aseprite

on:
  schedule:
    - cron: '0 12 * * *'
  # workflow_dispatch:

env:
  BUILD_TYPE: Release
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  fetch-aseprite-info:
    name: Fetch deps info
    runs-on: ubuntu-latest
    outputs:
      download-link: ${{ steps.aseprite-link.outputs.download-link }}
      release-tag:    ${{ steps.aseprite-link.outputs.release-tag }}
    steps:
      - name: Fetch Aseprite release link
        id: aseprite-link
        uses: a1393323447/fetch-release@main
        with:
          group: aseprite
          repo: aseprite
          match: Aseprite-.*?-Source.zip

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: fetch-aseprite-info
    permissions:
      contents: write
    outputs:
      download-link: ${{ needs.fetch-aseprite-info.outputs.download-link }}
      release-tag:    ${{ needs.fetch-aseprite-info.outputs.release-tag }}
    steps:
      - uses: actions/checkout@v2
      - uses: ncipollo/release-action@v1
        with:
          tag:     ${{ needs.fetch-aseprite-info.outputs.release-tag }}
          body:    Aseprite-${{ needs.fetch-aseprite-info.outputs.release-tag }}
          skipIfReleaseExists: true
          token:   ${{ secrets.GITHUB_TOKEN }}

  build-aseprite:
    name: Build Aseprite
    needs: create-release
    permissions:
      contents: write
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      # Windows 平台依赖安装
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install jpeg-turbo -y
          choco install p7zip -y

      # Ubuntu 平台依赖安装
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++ cmake ninja-build \
            libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev \
            libjpeg-turbo8-dev

      # macOS 平台依赖安装
      - name: Install dependencies (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          brew update
          brew install ninja p7zip jpeg-turbo

      - name: Fetch Skia release link
        id: skia-link
        uses: a1393323447/fetch-release@main
        with:
          group: aseprite
          repo: skia
          match: Skia-${{ runner.os }}-Release-x64(-libstdc\+\+)?.zip

      - name: Download Skia
        run: |
          curl -o Skia-${{ runner.os }}-Release-x64.zip -L ${{ steps.skia-link.outputs.download-link }}
          unzip Skia-${{ runner.os }}-Release-x64.zip -d skia

      - name: Download Aseprite source
        run: |
          curl -o Aseprite-source.zip -L ${{ needs.create-release.outputs.download-link }}
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build

      - name: Set up MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set VS env (Windows)
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-vsdevenv@master

      - name: Run CMake (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build
        shell: cmd
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} ^
                     -DCMAKE_IGNORE_PATH="C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/" ^
                     -DLAF_BACKEND=skia ^
                     -DSKIA_DIR=../../skia ^
                     -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 ^
                     -G Ninja ..

      - name: Run CMake (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                   -DLAF_BACKEND=skia \
                   -DSKIA_DIR=../../skia \
                   -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 \
                   -G Ninja ..

      - name: Run CMake (macOS)
        if: matrix.os == 'macOS-latest'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                   -DCMAKE_OSX_ARCHITECTURES=x86_64 \
                   -DLAF_BACKEND=skia \
                   -DSKIA_DIR=../../skia \
                   -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 \
                   -G Ninja ..

      - name: Build with Ninja
        working-directory: aseprite/build
        run: ninja aseprite

      - name: Clean up build artifacts
        working-directory: aseprite/build/bin
        shell: bash
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest

      - name: Create portable ini (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build/bin
        run: echo '# Portable mode' > aseprite.ini

      - name: Package ZIP
        working-directory: aseprite/build/bin
        run: 7z -tzip a Aseprite-${{ needs.create-release.outputs.release-tag }}-${{ runner.os }}.zip *

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file:       aseprite/build/bin/Aseprite-${{ needs.create-release.outputs.release-tag }}-${{ runner.os }}.zip
          asset_name: Aseprite-${{ needs.create-release.outputs.release-tag }}-${{ runner.os }}.zip
          tag:        ${{ needs.create-release.outputs.release-tag }}
